/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "zapocni_igru()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pogodi(pay,uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "rezultat_igre()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hello(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSA1IDEwCmJ5dGVjYmxvY2sgMHg3MzZiNzI2OTc2NjU2ZTY5NWY2MjcyNmY2YSAweCAweDYyNzI2ZjZhNjE2MyAweDE1MWY3Yzc1IDB4NzI2NTdhNzU2Yzc0NjE3NAp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sMTAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgwNDE0YWZiOCAvLyAiemFwb2NuaV9pZ3J1KClzdHJpbmciCj09CmJueiBtYWluX2w5CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4NWRkZDVmY2EgLy8gInBvZ29kaShwYXksdWludDY0KXN0cmluZyIKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhkODYwMDQxZSAvLyAicmV6dWx0YXRfaWdyZSgpc3RyaW5nIgo9PQpibnogbWFpbl9sNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDAyYmVjZTExIC8vICJoZWxsbyhzdHJpbmcpc3RyaW5nIgo9PQpibnogbWFpbl9sNgplcnIKbWFpbl9sNjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBoZWxsb2Nhc3Rlcl8xMQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiByZXp1bHRhdGlncmVjYXN0ZXJfMTAKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDg6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgcG9nb2RpY2FzdGVyXzkKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDk6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgemFwb2NuaWlncnVjYXN0ZXJfOAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTA6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KYm56IG1haW5fbDE0CnR4biBPbkNvbXBsZXRpb24KaW50Y18xIC8vIE9wdEluCj09CmJueiBtYWluX2wxMwplcnIKbWFpbl9sMTM6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIG9wdGluXzEKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE0Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVfMAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGNyZWF0ZQpjcmVhdGVfMDoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gInNrcml2ZW5pX2Jyb2oiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gb3B0X2luCm9wdGluXzE6CnByb3RvIDAgMAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIHphcG9jbmlfaWdydQp6YXBvY25paWdydV8yOgpwcm90byAwIDEKYnl0ZWNfMSAvLyAiIgpieXRlY18wIC8vICJza3JpdmVuaV9icm9qIgppbnRjXzIgLy8gNQphcHBfZ2xvYmFsX3B1dApwdXNoYnl0ZXMgMHgwMDMxNGU2MTZkNjU3Mzc0NjU2ZTIwNmE2NTIwNzM2YjcyNjk3NjY1NmU2OTIwNjI3MjZmNmEyZTIwNTM3MjY1NjM2ZTZmMjA3MzYxMjA3MDZmNjc2MTY0NmE2MTZlNmE2NTZkMjEgLy8gMHgwMDMxNGU2MTZkNjU3Mzc0NjU2ZTIwNmE2NTIwNzM2YjcyNjk3NjY1NmU2OTIwNjI3MjZmNmEyZTIwNTM3MjY1NjM2ZTZmMjA3MzYxMjA3MDZmNjc2MTY0NmE2MTZlNmE2NTZkMjEKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gcG9nb2RpCnBvZ29kaV8zOgpwcm90byAyIDEKYnl0ZWNfMSAvLyAiIgpieXRlY18wIC8vICJza3JpdmVuaV9icm9qIgphcHBfZ2xvYmFsX2dldApmcmFtZV9kaWcgLTEKPT0KYm56IHBvZ29kaV8zX2wyCnR4biBTZW5kZXIKYnl0ZWMgNCAvLyAicmV6dWx0YXQiCmludGNfMCAvLyAwCmFwcF9sb2NhbF9wdXQKYiBwb2dvZGlfM19sMwpwb2dvZGlfM19sMjoKdHhuIFNlbmRlcgpmcmFtZV9kaWcgLTIKZ3R4bnMgQW1vdW50CmludGNfMiAvLyA1CioKY2FsbHN1YiBwYXlfNQp0eG4gU2VuZGVyCmJ5dGVjIDQgLy8gInJlenVsdGF0IgppbnRjXzEgLy8gMQphcHBfbG9jYWxfcHV0CmNhbGxzdWIgcHJvbWVuaWJyb2pfNgpwb2dvZGlfM19sMzoKcmV0c3ViCgovLyByZXp1bHRhdF9pZ3JlCnJlenVsdGF0aWdyZV80Ogpwcm90byAwIDEKYnl0ZWNfMSAvLyAiIgp0eG4gU2VuZGVyCmJ5dGVjIDQgLy8gInJlenVsdGF0IgphcHBfbG9jYWxfZ2V0CmludGNfMSAvLyAxCj09CmJueiByZXp1bHRhdGlncmVfNF9sMgpwdXNoYnl0ZXMgMHgwMDFjNTA3MjZmNmQ2MTczNjE2YTIxMjA1MDcyNmY2MjYxNmEyMDY0NzI3NTY3NjkyMDYyNzI2ZjZhMmUgLy8gMHgwMDFjNTA3MjZmNmQ2MTczNjE2YTIxMjA1MDcyNmY2MjYxNmEyMDY0NzI3NTY3NjkyMDYyNzI2ZjZhMmUKZnJhbWVfYnVyeSAwCmIgcmV6dWx0YXRpZ3JlXzRfbDMKcmV6dWx0YXRpZ3JlXzRfbDI6CnB1c2hieXRlcyAweDAwMjM1MDZmNjc2ZjY0NjE2YjIxMjA0ZTZmNzY2MTYzMjA2YTY1MjA3NTcwNmM2MTYzNjU2ZTIwNmU2MTIwNzI2MTYzNzU2ZTJlIC8vIDB4MDAyMzUwNmY2NzZmNjQ2MTZiMjEyMDRlNmY3NjYxNjMyMDZhNjUyMDc1NzA2YzYxNjM2NTZlMjA2ZTYxMjA3MjYxNjM3NTZlMmUKZnJhbWVfYnVyeSAwCnJlenVsdGF0aWdyZV80X2wzOgpyZXRzdWIKCi8vIHBheQpwYXlfNToKcHJvdG8gMiAwCml0eG5fYmVnaW4KaW50Y18xIC8vIHBheQppdHhuX2ZpZWxkIFR5cGVFbnVtCnB1c2hpbnQgMTAwMCAvLyAxMDAwCml0eG5fZmllbGQgRmVlCmZyYW1lX2RpZyAtMQppdHhuX2ZpZWxkIEFtb3VudApmcmFtZV9kaWcgLTIKaXR4bl9maWVsZCBSZWNlaXZlcgppdHhuX3N1Ym1pdApyZXRzdWIKCi8vIHByb21lbmlfYnJvagpwcm9tZW5pYnJval82Ogpwcm90byAwIDAKdHhuIFNlbmRlcgpieXRlY18yIC8vICJicm9qYWMiCmludGNfMCAvLyAwCmFwcF9sb2NhbF9wdXQKcHJvbWVuaWJyb2pfNl9sMToKdHhuIFNlbmRlcgpieXRlY18yIC8vICJicm9qYWMiCmFwcF9sb2NhbF9nZXQKcHVzaGludCA3IC8vIDcKPApibnogcHJvbWVuaWJyb2pfNl9sNApieXRlY18wIC8vICJza3JpdmVuaV9icm9qIgphcHBfZ2xvYmFsX2dldAppbnRjXzMgLy8gMTAKPgpieiBwcm9tZW5pYnJval82X2w1CmJ5dGVjXzAgLy8gInNrcml2ZW5pX2Jyb2oiCmJ5dGVjXzAgLy8gInNrcml2ZW5pX2Jyb2oiCmFwcF9nbG9iYWxfZ2V0CmludGNfMyAvLyAxMAotCmFwcF9nbG9iYWxfcHV0CmIgcHJvbWVuaWJyb2pfNl9sNQpwcm9tZW5pYnJval82X2w0OgpieXRlY18wIC8vICJza3JpdmVuaV9icm9qIgpieXRlY18wIC8vICJza3JpdmVuaV9icm9qIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQorCmFwcF9nbG9iYWxfcHV0CnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAiYnJvamFjIgp0eG4gU2VuZGVyCmJ5dGVjXzIgLy8gImJyb2phYyIKYXBwX2xvY2FsX2dldAppbnRjXzEgLy8gMQorCmFwcF9sb2NhbF9wdXQKYiBwcm9tZW5pYnJval82X2wxCnByb21lbmlicm9qXzZfbDU6CnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAiYnJvamFjIgppbnRjXzAgLy8gMAphcHBfbG9jYWxfcHV0CnJldHN1YgoKLy8gaGVsbG8KaGVsbG9fNzoKcHJvdG8gMSAxCmJ5dGVjXzEgLy8gIiIKcHVzaGJ5dGVzIDB4NDg2NTZjNmM2ZjJjMjAgLy8gIkhlbGxvLCAiCmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMApjb25jYXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmxlbgppdG9iCmV4dHJhY3QgNiAwCmZyYW1lX2RpZyAwCmNvbmNhdApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyB6YXBvY25pX2lncnVfY2FzdGVyCnphcG9jbmlpZ3J1Y2FzdGVyXzg6CnByb3RvIDAgMApieXRlY18xIC8vICIiCmNhbGxzdWIgemFwb2NuaWlncnVfMgpmcmFtZV9idXJ5IDAKYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBwb2dvZGlfY2FzdGVyCnBvZ29kaWNhc3Rlcl85Ogpwcm90byAwIDAKYnl0ZWNfMSAvLyAiIgppbnRjXzAgLy8gMApkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpidG9pCmZyYW1lX2J1cnkgMgp0eG4gR3JvdXBJbmRleAppbnRjXzEgLy8gMQotCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmFzc2VydApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIHBvZ29kaV8zCmZyYW1lX2J1cnkgMApieXRlY18zIC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIHJlenVsdGF0X2lncmVfY2FzdGVyCnJlenVsdGF0aWdyZWNhc3Rlcl8xMDoKcHJvdG8gMCAwCmJ5dGVjXzEgLy8gIiIKY2FsbHN1YiByZXp1bHRhdGlncmVfNApmcmFtZV9idXJ5IDAKYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBoZWxsb19jYXN0ZXIKaGVsbG9jYXN0ZXJfMTE6CnByb3RvIDAgMApieXRlY18xIC8vICIiCmR1cAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpjYWxsc3ViIGhlbGxvXzcKZnJhbWVfYnVyeSAwCmJ5dGVjXzMgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1Yg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 2
    }
  },
  "schema": {
    "global": {
      "declared": {
        "skriveni_broj": {
          "type": "uint64",
          "key": "skriveni_broj",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {
        "brojac": {
          "type": "uint64",
          "key": "brojac",
          "descr": ""
        },
        "rezultat": {
          "type": "uint64",
          "key": "rezultat",
          "descr": ""
        }
      },
      "reserved": {}
    }
  },
  "contract": {
    "name": "Pogadjanje",
    "methods": [
      {
        "name": "zapocni_igru",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "pogodi",
        "args": [
          {
            "type": "pay",
            "name": "uplata"
          },
          {
            "type": "uint64",
            "name": "broj"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "rezultat_igre",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "hello",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "string"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

/**
 * Defines the types of available calls and state of the Pogadjanje smart contract.
 */
export type Pogadjanje = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'zapocni_igru()string' | 'zapocni_igru', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'pogodi(pay,uint64)string' | 'pogodi', {
      argsObj: {
        uplata: TransactionToSign | Transaction | Promise<SendTransactionResult>
        broj: bigint | number
      }
      argsTuple: [uplata: TransactionToSign | Transaction | Promise<SendTransactionResult>, broj: bigint | number]
      returns: string
    }>
    & Record<'rezultat_igre()string' | 'rezultat_igre', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: string
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'skriveni_broj'?: IntegerState
    }
    local: {
      'brojac'?: IntegerState
      'rezultat'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PogadjanjeSig = keyof Pogadjanje['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PogadjanjeSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Pogadjanje smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PogadjanjeSig> = Pogadjanje['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Pogadjanje smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PogadjanjeSig> = Pogadjanje['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PogadjanjeCreateCalls = (typeof PogadjanjeCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PogadjanjeCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type PogadjanjeDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PogadjanjeCreateCalls) => PogadjanjeCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PogadjanjeCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Pogadjanje smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the Pogadjanje smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the zapocni_igru()string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static zapocniIgru(args: MethodArgs<'zapocni_igru()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'zapocni_igru()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the pogodi(pay,uint64)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static pogodi(args: MethodArgs<'pogodi(pay,uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pogodi(pay,uint64)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.uplata, args.broj],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the rezultat_igre()string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static rezultatIgre(args: MethodArgs<'rezultat_igre()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'rezultat_igre()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'hello(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Pogadjanje smart contract
 */
export class PogadjanjeClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PogadjanjeClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Pogadjanje['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Pogadjanje smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PogadjanjeDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PogadjanjeCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Pogadjanje smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the Pogadjanje smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.optIn(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Pogadjanje smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the zapocni_igru()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public zapocniIgru(args: MethodArgs<'zapocni_igru()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PogadjanjeCallFactory.zapocniIgru(args, params))
  }

  /**
   * Calls the pogodi(pay,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public pogodi(args: MethodArgs<'pogodi(pay,uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PogadjanjeCallFactory.pogodi(args, params))
  }

  /**
   * Calls the rezultat_igre()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public rezultatIgre(args: MethodArgs<'rezultat_igre()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PogadjanjeCallFactory.rezultatIgre(args, params))
  }

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PogadjanjeCallFactory.hello(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Pogadjanje['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get skriveni_broj() {
        return PogadjanjeClient.getIntegerState(state, 'skriveni_broj')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<Pogadjanje['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get brojac() {
        return PogadjanjeClient.getIntegerState(state, 'brojac')
      },
      get rezultat() {
        return PogadjanjeClient.getIntegerState(state, 'rezultat')
      },
    }
  }

  public compose(): PogadjanjeComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      zapocniIgru(args: MethodArgs<'zapocni_igru()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.zapocniIgru(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      pogodi(args: MethodArgs<'pogodi(pay,uint64)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.pogodi(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      rezultatIgre(args: MethodArgs<'rezultat_igre()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.rezultatIgre(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      hello(args: MethodArgs<'hello(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hello(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.optIn.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PogadjanjeComposer
  }
}
export type PogadjanjeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the zapocni_igru()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  zapocniIgru(args: MethodArgs<'zapocni_igru()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PogadjanjeComposer<[...TReturns, MethodReturn<'zapocni_igru()string'>]>

  /**
   * Calls the pogodi(pay,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pogodi(args: MethodArgs<'pogodi(pay,uint64)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PogadjanjeComposer<[...TReturns, MethodReturn<'pogodi(pay,uint64)string'>]>

  /**
   * Calls the rezultat_igre()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rezultatIgre(args: MethodArgs<'rezultat_igre()string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PogadjanjeComposer<[...TReturns, MethodReturn<'rezultat_igre()string'>]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(args: MethodArgs<'hello(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): PogadjanjeComposer<[...TReturns, MethodReturn<'hello(string)string'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Pogadjanje smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): PogadjanjeComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Pogadjanje smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): PogadjanjeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PogadjanjeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<PogadjanjeComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<PogadjanjeComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type PogadjanjeComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type PogadjanjeComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
